{"version":3,"sources":["components/RegionalMap.jsx","components/UKMap.jsx","components/CovidTable.jsx","components/Chart.jsx","App.js","serviceWorker.js","index.js"],"names":["RegionalMap","fileName","regionCases","setTooltipContent","useState","geographies","setGeographies","useEffect","fetch","then","response","status","json","worlddata","feature","objects","x","features","console","log","handleCountryClick","countryIndex","properties","lad19nm","projection","geoMercator","fitSize","type","colorScale","scaleThreshold","domain","range","schemeReds","style","width","height","geography","map","geo","idx","key","rsmKey","onMouseEnter","numCases","onMouseLeave","fill","onClick","default","outline","stroke","strokeWidth","hover","pressed","React","memo","areaCases","Regional","toggleDisplayRegional","secondaryTable","setSecondaryTable","eer","regionName","EER13NM","replace","display","regional","areaName","UK","total","legend","Region","Button","color","Container","Row","Alert","Col","Table","striped","bordered","Object","keys","handleOnClick","length","Chart","borderColor","backgroundColor","date","data","label","labels","datasets","options","maintainAspectRatio","scales","xAxes","gridLines","drawOnChartArea","ticks","autoSkip","maxTicksLimit","yAxes","callback","value","App","cases","setCases","content","setContent","setAreaCases","data-tip","Date","ConfirmedCases","Tests","Deaths","window","open","src","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5f2bbfa.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst width = 800;\nconst height = 800;\n\nconst RegionalMap = ({ fileName, regionCases, setTooltipContent }) => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(\"/maps/\" + fileName + \".json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.x).features)\n        })\n      })\n  }, [fileName])\n\n  const handleCountryClick = countryIndex => {\n    console.log(geographies[countryIndex].properties.lad19nm);\n  }\n\n  const projection = geoMercator()\n                .fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([50, 100, 200, 500, 1000, 5000])\n    .range(schemeReds[7]);\n\n  return (\n    <div style={{width: \"100%\"}} >\n    <ComposableMap width={ width } height={ height } projection={projection} >\n        <Geographies geography={geographies}>\n          {({ geographies }) =>\n            geographies.map((geo, idx) => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                onMouseEnter={() => {\n                  const numCases = (geo.properties.lad19nm in regionCases ? regionCases[geo.properties.lad19nm] : '0');\n                  setTooltipContent(`${geo.properties.lad19nm}: ${numCases} Cases`);\n                }}\n                onMouseLeave={() => {\n                  setTooltipContent(\"\");\n                }}\n                fill={geo.properties.lad19nm in regionCases ? colorScale(regionCases[geo.properties.lad19nm]) : colorScale(0)}\n                onClick={() => handleCountryClick(idx)}\n                style={{\n                  default: {\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"0.5\"\n                  },\n                  hover: {\n                    // fill: \"#F53\",\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"2\"\n                  },\n                  pressed: {\n                    outline: \"none\"\n                  }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n    </ComposableMap>\n  </div>\n\n    // <svg width={ width } height={ height }>\n    //   <g className=\"countries\">\n    //     {\n    //       geographies.map((d,i) => {\n    //         geoPath().projection(projection)(d)\n    //         return(\n            \n    //         <path\n    //           key={ `path-${ i }` }\n    //           d={ geoPath().projection(projection)(d) }\n    //           className=\"country\"\n    //           fill={d.properties.lad19nm in regionCases ? colorScale(regionCases[d.properties.lad19nm]) : colorScale(0)}\n    //           stroke=\"#000000\"\n    //           onClick={ () => handleCountryClick(i) }\n    //         />\n    //       )})\n    //     }\n    //   </g>\n    // </svg>\n  )\n}\n\nexport default RegionalMap;","import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport { Button } from 'reactstrap';\n\nimport RegionalMap from \"./RegionalMap\";\n\nconst width = 20;\nconst height = 20;\n\nconst UKMap = ({ setTooltipContent, areaCases, Regional, toggleDisplayRegional, secondaryTable, setSecondaryTable }) => {\n  const [geographies, setGeographies] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/maps/phe_regions.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.eer).features)\n        })\n      })\n  }, []);\n\n  const handleCountryClick = countryIndex => {\n    const regionName = geographies[countryIndex].properties.EER13NM\n    const fileName = regionName.replace(/ /g, '_')\n\n    toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[regionName].regional });\n    setSecondaryTable({ display: true, areaName: regionName })\n  }\n\n  const projection = geoMercator().fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([1000, 1500, 2000, 2500, 5000, 15000])\n    .range(schemeReds[7]);\n\n\n    const UK = () => {\n      return (\n      <div style={{width: \"100%\"}} >\n        <ComposableMap width={ width } height={ height } projection={projection} >\n            <Geographies geography={geographies}>\n              {({ geographies }) =>\n                geographies.map((geo, idx) => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(`${geo.properties.EER13NM}: ${areaCases[geo.properties.EER13NM].total} Cases`);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                    fill={geo.properties.EER13NM in areaCases ? colorScale(areaCases[geo.properties.EER13NM].total) : colorScale(0)}\n                    onClick={() => handleCountryClick(idx)}\n                    legend\n                    style={{\n                      default: {\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"0.01\"\n                      },\n                      hover: {\n                        // fill: \"#F53\",\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"0.05\"\n                      },\n                      pressed: {\n                        outline: \"none\"\n                      }\n                    }}\n                  />\n                ))\n              }\n            </Geographies>\n        </ComposableMap>\n      </div>\n    )};\n\n    const Region = () => \n      <div>\n        <Button color='primary' onClick={() => { toggleDisplayRegional({display: false}); setSecondaryTable({ ...secondaryTable, display: false }); }}>BACK</Button>\n        <RegionalMap fileName={Regional.fileName} regionCases={Regional.regionCases} setTooltipContent={setTooltipContent}/>\n      </div>\n\n  return (\n    <div>\n{Regional.display ? <Region /> : <UK />\n        }\n    </div>\n\n  )\n}\n\nexport default React.memo(UKMap);","import React, { useEffect } from \"react\";\nimport { Table, Container, Row, Col, Alert } from 'reactstrap';\n\nconst CovidTable = ({ areaCases, toggleDisplayRegional, secondaryTable, setSecondaryTable }) => {\n  useEffect(() => {\n  }, []);\n\n  const handleOnClick = areaName => {\n        if (secondaryTable.areaName === areaName) {\n            if (secondaryTable.display) {\n                toggleDisplayRegional({display: false})\n            } else {\n                const fileName = areaName.replace(/ /g, '_')\n            \n                toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[areaName].regional });\n            }\n\n            setSecondaryTable({ display: !secondaryTable.display, areaName })\n        } else {\n            setSecondaryTable({ display: true, areaName })\n\n            const fileName = areaName.replace(/ /g, '_')\n            toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[areaName].regional });\n        }\n  }\n\n  return <Container>\n            <Row>\n                <Alert color=\"info\">\n                    Click on a row to view the numbers for each UTLA in the Region!\n                </Alert>\n            </Row>\n            <Row>\n                <Col>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>Region</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.keys(areaCases).map(areaName => <tr onClick={ () => handleOnClick(areaName) }>\n                                                                        <td>{areaName}</td>\n                                                                        <td>{areaCases[areaName].total}</td>\n                                                                    </tr>)}\n                        </tbody>\n                    </Table>\n                </Col>\n                <Col>\n                {secondaryTable.display ?\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>{secondaryTable.areaName}</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {areaCases.length === 0 ? null :\n                                Object.keys(areaCases[secondaryTable.areaName].regional).map(areaName => <tr>\n                                                                                                            <td>{areaName}</td>\n                                                                                                            <td>{areaCases[secondaryTable.areaName].regional[areaName]}</td>\n                                                                                                        </tr>)}\n                        </tbody>\n                    </Table>\n                :\n                null\n                            }\n\n                </Col>\n            </Row>\n        </Container>;\n    }\n\nexport default React.memo(CovidTable);","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst Chart = ({ borderColor, backgroundColor, date, data, label }) =>\n    <div style={{borderColor, backgroundColor, height:200, width:700 }} >\n        <Line\n            data={{\n                labels: date,\n                datasets: [{\n                    label,\n                    fill: false,\n                    borderColor,\n                    data,\n                }]\n            }}\n            options={{\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            callback: value => `${value / 1000}k`\n                        }\n                    }]\n                }\n            }}\n        />\n    </div>;\n\nexport default Chart;","import React, { useState, useEffect } from \"react\";\nimport UKMap from './components/UKMap.jsx';\nimport ReactTooltip from \"react-tooltip\";\nimport { Container, Row, Col } from 'reactstrap';\nimport CovidTable from \"./components/CovidTable.jsx\";\nimport { Button } from 'reactstrap';\nimport Chart from './components/Chart.jsx';\n\nconst App = () => {\n    const [cases, setCases] = useState(null)\n    const [content, setContent] = useState('');\n    const [areaCases, setAreaCases] = useState([]);\n    const [Regional, toggleDisplayRegional] = useState({ display: false, fileName: '', regionCases: '' });\n    const [secondaryTable, setSecondaryTable] = useState({ display: false, areaName: '' });\n\n    useEffect(() => {\n        fetch(\"/covid_data/uk_totals.json\")\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log(`There was a problem: ${response.status}`)\n                    return\n                }\n                response.json().then(cases => {\n                    setCases(cases);\n                })\n            });\n        \n        fetch(\"/covid_data/uk_by_region.json\")\n            .then(response => {\n              if (response.status !== 200) {\n                console.log(`There was a problem: ${response.status}`)\n                return\n              }\n              response.json().then(cases => {\n                setAreaCases(cases);\n              })\n            })\n    }, [])\n\n  return (\n    <Container data-tip=''>\n        <Row>\n            <Col>\n                <h1>{'England Covid-19 Tracker'}</h1>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <UKMap setTooltipContent={setContent} areaCases={areaCases} Regional={Regional} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} />\n                <ReactTooltip>{content}</ReactTooltip>\n            </Col>\n            <Col>\n                <CovidTable areaCases={areaCases} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} />\n                \n            </Col>\n        </Row>\n        <Row>{cases === null ? null : <Chart borderColor={'#ff073a'} backgroundColor={'rgba(255,7,58,0.12549)'} date={cases.Date} data={cases.ConfirmedCases} label={'Confirmed Cases'} />} </Row>\n        <Row>{cases === null ? null : <Chart borderColor={'#3a07ff'} backgroundColor={'rgba(58,7,255,0.12549)'} date={cases.Date} data={cases.Tests} label={'Tests'} />} </Row>\n        <Row>{cases === null ? null : <Chart borderColor={'grey'} backgroundColor={'#DCDCDC'} date={cases.Date} data={cases.Deaths} label={'Deaths'} />} </Row>\n        <Row>\n            <Button style={{backgroundColor: 'White', color: 'black'}} onClick={() => window.open('https://www.github.com/tkhokhar25/uk-covid')}>\n                <img src='/logo32.png' alt='yolo'></img>Check out on Github\n            </Button>\n        </Row>\n    </Container>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}