{"version":3,"sources":["components/RegionalMap.jsx","components/UKMap.jsx","components/CovidTable.jsx","components/Chart.jsx","components/Dashboard.jsx","components/Ball.jsx","components/Sketcher.jsx","App.js","components/Constants.jsx","serviceWorker.js","index.js"],"names":["React","memo","fileName","regionCases","regionName","setTooltipContent","setGraphData","localCases","useState","geographies","setGeographies","useEffect","fetch","process","then","response","status","json","worlddata","feature","objects","x","features","console","log","projection","geoMercator","fitSize","type","colorScale","scaleThreshold","domain","range","schemeReds","width","height","geography","map","geo","idx","key","rsmKey","onMouseEnter","numCases","properties","lad19nm","display","data","onMouseLeave","fill","onClick","style","default","outline","stroke","strokeWidth","hover","pressed","areaCases","Regional","toggleDisplayRegional","secondaryTable","setSecondaryTable","eer","handleRegionClick","regionIndex","EER13NM","replace","Totals","regional","areaName","UK","total","Region","Button","color","marginTop","Container","Row","Alert","Col","Table","striped","bordered","length","Object","keys","xs","handleOnClick","Chart","borderColor","backgroundColor","date","label","marginBottom","labels","datasets","options","legend","maintainAspectRatio","scales","xAxes","gridLines","drawOnChartArea","ticks","autoSkip","maxTicksLimit","yAxes","callback","value","borderColors","backgroundColors","cases","i","md","Card","CardBody","CardTitle","whiteSpace","CardSubtitle","slice","hypot","Math","calculateChangeDirection","dx","dy","hyp","ax","ay","checkCollision","diameter","Ball","p","simulationState","this","floor","random","y","sz","xspeed","yspeed","exposedTime","infectedTime","update","exposedToInfected","infectedToRecovers","noStroke","ellipse","bounce","checkCollisions","others","otherBall","balls","sketchLegend","setup","createCanvas","draw","background","textSize","text","noLoop","setDisplaySimulator","initiallyExposed","setSimulationState","sketch","max","onChange","changeEvent","target","App","setCases","content","setContent","setAreaCases","setLocalCases","graphData","displaySimulator","maxWidth","window","innerWidth","data-tip","paddingTop","paddingBottom","Date","margin","open","src","alt","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.566ce02c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst width = 800;\nconst height = 800;\n\nconst RegionalMap = ({ fileName, regionCases, regionName, setTooltipContent, setGraphData, localCases }) => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/maps/\" + fileName + \".json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.x).features)\n        })\n      })\n  }, [fileName])\n\n  const projection = geoMercator()\n                .fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([50, 100, 200, 500, 1000, 5000])\n    .range(schemeReds[7]);\n\n  return (\n    <div>\n    {/* <div> */}\n    <ComposableMap width={ width } height={ height } projection={projection} >\n        <Geographies geography={geographies}>\n          {({ geographies }) =>\n            geographies.map((geo, idx) => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                onMouseEnter={() => {\n                  const numCases = (geo.properties.lad19nm in regionCases ? regionCases[geo.properties.lad19nm] : '0');\n                  setTooltipContent(`${geo.properties.lad19nm}: ${numCases} Cases`);\n                  setGraphData({display: true, data: localCases[regionName][geo.properties.lad19nm] })\n                }}\n                onMouseLeave={() => {\n                  setTooltipContent(\"\");\n                  setGraphData({display: false, data: [0] })\n                }}\n                fill={geo.properties.lad19nm in regionCases ? colorScale(regionCases[geo.properties.lad19nm]) : colorScale(0)}\n                onClick={() => {\n                  const numCases = (geo.properties.lad19nm in regionCases ? regionCases[geo.properties.lad19nm] : '0');\n                  setTooltipContent(`${geo.properties.lad19nm}: ${numCases} Cases`);\n                  setGraphData({display: true, data: localCases[regionName][geo.properties.lad19nm] })\n                }}\n                style={{\n                  default: {\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"0.5\"\n                  },\n                  hover: {\n                    // fill: \"#F53\",\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"2\"\n                  },\n                  pressed: {\n                    outline: \"none\"\n                  }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n    </ComposableMap>\n  </div>\n  )\n}\n\nexport default React.memo(RegionalMap);","import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport { Button } from 'reactstrap';\n// import {isMobile} from 'react-device-detect';\n\nimport RegionalMap from \"./RegionalMap\";\n\nconst width = 800;\nconst height = 800;\n\nconst UKMap = ({ setTooltipContent, areaCases, Regional, toggleDisplayRegional, secondaryTable, setSecondaryTable, setGraphData, localCases }) => {\n  const [geographies, setGeographies] = useState([]);\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/maps/phe_regions.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.eer).features)\n        })\n      })\n  }, []);\n\n  const handleRegionClick = regionIndex => {\n      const regionName = geographies[regionIndex].properties.EER13NM\n      const fileName = regionName.replace(/ /g, '_')\n  \n      setTooltipContent(\"\");\n      setGraphData({display: true, data: localCases.Totals[geographies[regionIndex].properties.EER13NM] })\n      toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[regionName].regional, regionName });\n      setSecondaryTable({ display: true, areaName: regionName })\n  }\n\n  const projection = geoMercator().fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([1000, 1500, 2000, 2500, 5000, 15000])\n    .range(schemeReds[7]);\n\n\n    const UK = () => {\n      return (\n      <div>\n      {/* <div> */}\n        <ComposableMap width={ width } height={ height } projection={projection} >\n            <Geographies geography={geographies}>\n              {({ geographies }) =>\n                geographies.map((geo, idx) => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(`${geo.properties.EER13NM}: ${areaCases[geo.properties.EER13NM].total} Cases`);\n                      setGraphData({display: true, data: localCases.Totals[geo.properties.EER13NM] })\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                      setGraphData({display: false, data: [] })\n                    }}\n                    fill={geo.properties.EER13NM in areaCases ? colorScale(areaCases[geo.properties.EER13NM].total) : colorScale(0)}\n                    onClick={() => handleRegionClick(idx)}\n                    style={{\n                      default: {\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"0.5\"\n                      },\n                      hover: {\n                        // fill: \"#F53\",\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"2\"\n                      },\n                      pressed: {\n                        outline: \"none\"\n                      }\n                    }}\n                  />\n                ))\n              }\n            </Geographies>\n        </ComposableMap>\n      </div>\n    )};\n\n    const Region = () => \n      <div>\n        <Button color='primary' onClick={() => { toggleDisplayRegional({display: false}); setSecondaryTable({ ...secondaryTable, display: false }); }}>BACK</Button>\n        <RegionalMap fileName={Regional.fileName} regionCases={Regional.regionCases} regionName={Regional.regionName} setTooltipContent={setTooltipContent} setGraphData={setGraphData} localCases={localCases} />\n      </div>\n\n  return (\n    <div style={{height: '600px', marginTop: '25px'}} >\n{Regional.display ? <Region /> : <UK />\n        }\n    </div>\n\n  )\n}\n\nexport default React.memo(UKMap);","import React, { useEffect } from \"react\";\nimport { Table, Container, Row, Col, Alert } from 'reactstrap';\n\nconst CovidTable = ({ areaCases, toggleDisplayRegional, secondaryTable, setSecondaryTable }) => {\n  useEffect(() => {\n  }, []);\n\n  const handleOnClick = areaName => {\n        if (secondaryTable.areaName === areaName) {\n            if (secondaryTable.display) {\n                toggleDisplayRegional({display: false})\n            } else {\n                const fileName = areaName.replace(/ /g, '_')\n            \n                toggleDisplayRegional({ display: true, fileName, regionName: areaName, regionCases: areaCases[areaName].regional });\n            }\n\n            setSecondaryTable({ display: !secondaryTable.display, areaName })\n        } else {\n            setSecondaryTable({ display: true, areaName })\n\n            const fileName = areaName.replace(/ /g, '_')\n            toggleDisplayRegional({ display: true, fileName, regionName: areaName, regionCases: areaCases[areaName].regional });\n        }\n  }\n\n  return <Container>\n            <Row>\n                <Alert color=\"info\">\n                    Click on a row to view the numbers for each UTLA in the Region!\n                </Alert>\n            </Row>\n            <Row>\n            {!secondaryTable.display ?\n                <Col xs='12'>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>Region</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.keys(areaCases).map(areaName => <tr onClick={ () => handleOnClick(areaName) }>\n                                                                        <td>{areaName}</td>\n                                                                        <td>{areaCases[areaName].total}</td>\n                                                                    </tr>)}\n                        </tbody>\n                    </Table>\n                </Col>\n                :\n                <Col>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>{secondaryTable.areaName}</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {areaCases.length === 0 ? null :\n                                Object.keys(areaCases[secondaryTable.areaName].regional).map(areaName => <tr>\n                                                                                                            <td>{areaName}</td>\n                                                                                                            <td>{areaCases[secondaryTable.areaName].regional[areaName]}</td>\n                                                                                                        </tr>)}\n                        </tbody>\n                    </Table>\n                </Col>\n            }\n            </Row>\n        </Container>;\n    }\n\nexport default React.memo(CovidTable);","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Col } from 'reactstrap';\n\nconst Chart = ({ borderColor, backgroundColor, date, data, label, display, height, width }) =>\n    <Col xs='12' style={{borderColor, backgroundColor, height, width, marginTop: '25px', marginBottom: '25px' }} >\n        <Line\n            data={{\n                labels: date,\n                datasets: [{\n                    label,\n                    fill: false,\n                    borderColor,\n                    data,\n                    display\n                }]\n            }}\n            options={{\n                legend: {\n                    display\n                },\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false,\n                            display\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            display\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false,\n                            display\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            callback: value => `${value / 1000}k`,\n                            display\n                        }\n                    }]\n                }\n            }}\n        />\n    </Col>;\n\nexport default Chart;\n","import React, { useEffect } from \"react\";\nimport { Card, CardTitle, CardBody, Col, Row, CardSubtitle } from 'reactstrap';\n\nconst Dashboard = ({ borderColors, backgroundColors, labels, cases }) => {\n  useEffect(() => {\n  }, [])\n\n  return (\n    <Row>\n        {backgroundColors.map((color, i) => <Col xs='4' md ='2' style={{color: borderColors[i]}}>\n                                                <Card style={{backgroundColor: color}}>\n                                                    <CardBody>\n                                                        <CardTitle style={{whiteSpace: \"nowrap\"}}>{labels[i]}</CardTitle>\n                                                        <CardSubtitle>{cases[Object.keys(cases)[i]].slice(-1)[0]}</CardSubtitle>\n                                                    </CardBody>\n                                                </Card>\n                                            </Col>)}\n    </Row>\n  )\n}\n\nexport default React.memo(Dashboard);","const width = 800;\nconst height = 600;\n\nconst { hypot } = Math\n\nconst calculateChangeDirection = ({ dx, dy }) => {\n  const hyp = hypot(dx, dy);\n  const ax = dx / hyp;\n  const ay = dy / hyp\n  return { ax, ay }\n}\n\nconst checkCollision = ({ dx, dy, diameter }) => {\n  const distance2 = dx * dx + dy * dy\n  return distance2 < diameter * diameter\n}\n\n\nexport default function Ball(p, simulationState) {\n\tthis.x = Math.floor((Math.random() * width) + 1);\n  this.y = Math.floor((Math.random() * height) + 1);\n  this.color = 'blue';\n\tthis.sz = 15;\n\tthis.xspeed = Math.random()\n  this.yspeed = Math.random();\n  this.p = p;\n  this.exposedTime = 0;\n  this.infectedTime = 0;\n\t\n\tthis.update = () => {\n    if (this.color === 'grey') {\n      this.xspeed = 0;\n      this.yspeed = 0;\n    }\n\n\t\tthis.x += this.xspeed;\n\t\tthis.y += this.yspeed;\n\t};\n\t\n\tthis.display = () => {\n    if (this.color === 'orange') {\n      this.exposedTime += 1;\n      if (this.exposedTime >= 200) {\n        const fate = Math.floor((Math.random() * 100) + 1);\n        if (fate < simulationState.exposedToInfected) {\n          this.color = 'green';\n        } else {\n          this.color = 'pink';\n        }\n      }\n    } else if (this.color === 'green') {\n      this.infectedTime += 1;\n      if (this.infectedTime >= 200) {\n        const fate = Math.floor((Math.random() * 100) + 1);\n        if (fate < simulationState.infectedToRecovers) {\n          this.color = 'pink';\n        } else {\n          this.color = 'grey';\n        }\n      }\n    }\n    \n\t\tp.fill(this.color);\n\t\tp.noStroke();\n\t\tp.ellipse(this.x, this.y, this.sz, this.sz);\n\t};\n\t\n\tthis.bounce = () => {\n\t\tif (this.x > width || this.x < 0) {\n\t\t\tthis.xspeed *= -1;\n\t\t}\n\t\tif (this.y > height || this.y < 0) {\n\t\t\tthis.yspeed *= -1;\n\t\t}\n  }\n\n  this.checkCollisions = (others, idx) => {\n    for (let i = idx + 1; i < others.length; i++) {\n      const otherBall = others[i]\n\n      const dx = otherBall.x - this.x\n      const dy = otherBall.y - this.y\n\n      if (checkCollision({ dx, dy, diameter: 15 })) {\n        const { ax, ay } = calculateChangeDirection({ dx, dy })\n\n        this.xspeed -= ax\n        this.yspeed -= ay\n        otherBall.xspeed = ax\n        otherBall.yspeed = ay\n\n        if ((this.color === 'green' || this.color === 'orange') && otherBall.color === 'blue') {\n          otherBall.color = 'orange';\n        } else if ((otherBall.color === 'green' || otherBall.color === 'orange') && this.color === 'blue') {\n          this.color = 'orange';\n        }\n      }\n    }\n  }\n  \n}","import React, { useState } from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport Ball from './Ball';\n\nconst width = 800;\nconst height = 600;\n\nvar balls = [];\n\nfunction sketch (p, simulationState) {\n \n  p.setup = () => {\n    p.createCanvas(width, height);\n    \n    for (var i = 0; i < 200; i++) {\n      balls[i] = new Ball(p, simulationState);\n    }\n\n    for (i = 0; i < simulationState.initiallyExposed; i++) {\n      balls[i].color = 'orange';\n    }\n  };\n  p.draw = () => {\n    p.background('#FFFFFF');\n\n    for (var i = 0; i < balls.length; i++) {\n      balls[i].update();\n      balls[i].display();\n      balls[i].bounce();\n      balls[i].checkCollisions(balls, i);\n    }\n  };\n}\n\nfunction sketchLegend(p) {\n  p.setup = () => {\n    p.createCanvas(650, 20);\n  };\n\n  p.draw = () => {\n    p.background('#FFFFFF');\n    p.textSize(20)\n\n    p.fill('blue');\n\t\tp.noStroke();\n    p.ellipse(15, 10, 15, 15);\n    \n    p.text('Healthy', 30, 17)\n\n    p.fill('orange');\n\t\tp.noStroke();\n    p.ellipse(130, 10, 15, 15);\n\n    p.text('Exposed', 145, 17);\n\n    p.fill('green');\n\t\tp.noStroke();\n    p.ellipse(245, 10, 15, 15);\n\n    p.text('Infected', 260, 17);\n\n    p.fill('pink');\n\t\tp.noStroke();\n    p.ellipse(360, 10, 15, 15);\n    \n    p.text('Recovered', 375, 17);\n\n    p.fill('grey');\n\t\tp.noStroke();\n    p.ellipse(490, 10, 15, 15);\n    \n    p.text('Deceased', 505, 17);\n\n    p.noLoop()\n  };\n}\n\nconst Sketcher = ({ setDisplaySimulator }) =>  {\n  const [simulationState, setSimulationState] = useState({ initiallyExposed: 1, exposedToInfected: 80, infectedToRecovers: 80 });\n\n  return (\n    <Container>\n      <Row>\n        <p>\n          <h1>{'SEIR DISEASE SPREAD MODEL USING BALLS'}</h1>\n          <h6>{'A healthy person can get exposed to the virus.'}</h6>\n          <h6>{'An exposed person recovers or gets infected and can expose other people to the virus.'}</h6>\n          <h6>{'An infected person recovers or dies and can expose other people to the virus.'}</h6>\n        </p>\n      </Row>\n      <Row>\n        <Button color='primary' onClick={() => setDisplaySimulator(false)}><h4>View Map</h4></Button>\n      </Row>\n      <Row>\n          <Col>\n            <P5Wrapper sketch={p => sketch(p, simulationState)} />\n            <P5Wrapper sketch={sketchLegend} />\n          </Col>\n          <Col>\n            <div>\n              <p>Number of initially exposed balls (out of 200)</p>\n              <RangeSlider\n                max={200}\n                value={simulationState.initiallyExposed}\n                onChange={changeEvent => setSimulationState({...simulationState, initiallyExposed: changeEvent.target.value})}\n              />\n            </div>\n            <div>\n              <p>Percent of exposed population that gets infected</p>\n              <RangeSlider\n                value={simulationState.exposedToInfected}\n                onChange={changeEvent => setSimulationState({...simulationState, exposedToInfected: changeEvent.target.value})}\n              />\n            </div>\n            <div>\n              <p>Percent of infected population that recovers</p>\n              <RangeSlider\n                value={simulationState.infectedToRecovers}\n                onChange={changeEvent => setSimulationState({...simulationState, infectedToRecovers: changeEvent.target.value})}\n              />\n            </div>\n            <div>\n              <Button color='primary' onClick={() => setSimulationState({ initiallyExposed: 1, exposedToInfected: 80, infectedToRecovers: 80 })}>RESET AND RUN</Button>\n            </div>\n          </Col>\n      </Row>\n    </Container>\n  )\n};\n\nexport default React.memo(Sketcher);","import React, { useState, useEffect } from \"react\";\nimport UKMap from './components/UKMap.jsx';\nimport ReactTooltip from \"react-tooltip\";\nimport { Container, Row, Col } from 'reactstrap';\nimport CovidTable from \"./components/CovidTable.jsx\";\nimport { Button } from 'reactstrap';\nimport Chart from './components/Chart.jsx';\nimport Dashboard from \"./components/Dashboard.jsx\";\nimport { Red, Blue, Grey, LightRed, LightBlue, LightGrey } from './components/Constants.jsx';\nimport Sketcher from './components/Sketcher.jsx';\n\nconst borderColors = [Red, Blue, Grey];\nconst backgroundColors = [LightRed, LightBlue, LightGrey];\nconst labels = ['CONFIRMED', 'TESTED', 'DECEASED'];\n\nconst App = () => {\n    const [cases, setCases] = useState(null);\n    const [content, setContent] = useState('');\n    const [areaCases, setAreaCases] = useState([]);\n    const [localCases, setLocalCases] = useState(null);\n    const [graphData, setGraphData] = useState({ data: [], display: false });\n    const [Regional, toggleDisplayRegional] = useState({ display: false, fileName: '', regionCases: '' });\n    const [secondaryTable, setSecondaryTable] = useState({ display: false, areaName: '' });\n    const [displaySimulator, setDisplaySimulator] = useState(false);\n\n    useEffect(() => {\n        fetch(process.env.PUBLIC_URL + \"/covid_data/uk_totals.json\")\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log(`There was a problem: ${response.status}`)\n                    return\n                }\n                response.json().then(cases => {\n                    setCases(cases);\n                })\n            });\n\n        fetch(process.env.PUBLIC_URL + \"/covid_data/local_totals.json\")\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log(`There was a problem: ${response.status}`)\n                    return\n                }\n                response.json().then(cases => {\n                    setLocalCases(cases);\n                })\n            });\n        \n        fetch(process.env.PUBLIC_URL + \"/covid_data/uk_by_region.json\")\n            .then(response => {\n              if (response.status !== 200) {\n                console.log(`There was a problem: ${response.status}`)\n                return\n              }\n              response.json().then(cases => {\n                setAreaCases(cases);\n              })\n            })\n    }, [])\n    console.log(graphData);\n\n    return (\n        <div style={{maxWidth: window.innerWidth}}>\n            {displaySimulator ? <Sketcher setDisplaySimulator={setDisplaySimulator}/> :\n          <Container data-tip=''>\n                <Row style={{paddingTop: '25px'}}>\n                    <Col xs='12' md='6'><h1>{'England Covid-19 Tracker'}</h1></Col>\n                  <Col xs='12' md='6' style={{paddingBottom: '25px'}}><Button color='primary' onClick={() => setDisplaySimulator(true)}><h4>View Simulator</h4></Button></Col>\n              </Row>\n              <Row>\n                <Col>{cases === null ? null : <Dashboard borderColors={borderColors} backgroundColors={backgroundColors} labels={labels} cases={cases} /> } </Col>\n              </Row>\n              <Row>\n                <Col xs='12' md='6'>\n                    <UKMap setTooltipContent={setContent} areaCases={areaCases} Regional={Regional} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} setGraphData={setGraphData} localCases={localCases} />\n                    <ReactTooltip>{content}</ReactTooltip>\n                    {graphData.display ? <h2>{content}</h2> : null}\n                    {graphData.display ? <Chart borderColor={borderColors[0]} backgroundColor={backgroundColors[0]} label={labels[0]} date={localCases.Date} data={graphData.data} display={true} height={200} width={700} /> : null }\n                    <h2>{'England Trends'}</h2>\n                    {cases === null ? null : borderColors.map((color, i)=> <Chart borderColor={borderColors[i]} backgroundColor={backgroundColors[i]} label={labels[i]} date={cases.Date} data={cases[Object.keys(cases)[i]]} display={true} height={200} width={700} />)}\n                </Col>\n                <Col xs='12' md='6'>\n                    <CovidTable areaCases={areaCases} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} />\n                </Col>\n              </Row>\n              <Row>\n                  <Col xs='12' style={{margin: '25px'}}>\n                    <Button style={{backgroundColor: 'White', color: 'black'}} onClick={() => window.open('https://www.github.com/tkhokhar25/uk-covid')}>\n                        <img src={process.env.PUBLIC_URL + '/logo32.png'} alt='yolo'></img>Check out on Github\n                    </Button>\n                </Col>\n              </Row>\n          </Container>\n          }\n      </div>\n    )\n}\n\nexport default App;","export const Red = '#ff073a';\nexport const Blue = '#3a07ff';\nexport const Grey = 'grey';\n\nexport const LightRed = 'rgba(255,7,58,0.12549)';\nexport const LightBlue = 'rgba(58,7,255,0.12549)';\nexport const LightGrey = '#DCDCDC';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}