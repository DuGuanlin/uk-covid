{"version":3,"sources":["components/RegionalMap.jsx","components/UKMap.jsx","components/CovidTable.jsx","components/Chart.jsx","components/Dashboard.jsx","App.js","components/Constants.jsx","serviceWorker.js","index.js"],"names":["RegionalMap","fileName","regionCases","setTooltipContent","useState","geographies","setGeographies","useEffect","fetch","process","then","response","status","json","worlddata","feature","objects","x","features","console","log","handleCountryClick","countryIndex","properties","lad19nm","projection","geoMercator","fitSize","type","colorScale","scaleThreshold","domain","range","schemeReds","style","width","height","geography","map","geo","idx","key","rsmKey","onMouseEnter","numCases","onMouseLeave","fill","onClick","default","outline","stroke","strokeWidth","hover","pressed","React","memo","areaCases","Regional","toggleDisplayRegional","secondaryTable","setSecondaryTable","eer","regionName","EER13NM","replace","display","regional","areaName","UK","total","Region","Button","color","Container","Row","Alert","Col","Table","striped","bordered","Object","keys","handleOnClick","length","Chart","borderColor","backgroundColor","date","data","label","labels","datasets","options","legend","maintainAspectRatio","scales","xAxes","gridLines","drawOnChartArea","ticks","autoSkip","maxTicksLimit","yAxes","callback","value","borderColors","backgroundColors","cases","i","Card","Date","CardBody","CardTitle","CardSubtitle","slice","App","setCases","content","setContent","setAreaCases","data-tip","window","open","src","alt","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09fe4fb3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst width = 800;\nconst height = 800;\n\nconst RegionalMap = ({ fileName, regionCases, setTooltipContent }) => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/maps/\" + fileName + \".json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.x).features)\n        })\n      })\n  }, [fileName])\n\n  const handleCountryClick = countryIndex => {\n    console.log(geographies[countryIndex].properties.lad19nm);\n  }\n\n  const projection = geoMercator()\n                .fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([50, 100, 200, 500, 1000, 5000])\n    .range(schemeReds[7]);\n\n  return (\n    <div style={{width: \"100%\"}} >\n    <ComposableMap width={ width } height={ height } projection={projection} >\n        <Geographies geography={geographies}>\n          {({ geographies }) =>\n            geographies.map((geo, idx) => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                onMouseEnter={() => {\n                  const numCases = (geo.properties.lad19nm in regionCases ? regionCases[geo.properties.lad19nm] : '0');\n                  setTooltipContent(`${geo.properties.lad19nm}: ${numCases} Cases`);\n                }}\n                onMouseLeave={() => {\n                  setTooltipContent(\"\");\n                }}\n                fill={geo.properties.lad19nm in regionCases ? colorScale(regionCases[geo.properties.lad19nm]) : colorScale(0)}\n                onClick={() => handleCountryClick(idx)}\n                style={{\n                  default: {\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"0.5\"\n                  },\n                  hover: {\n                    // fill: \"#F53\",\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"2\"\n                  },\n                  pressed: {\n                    outline: \"none\"\n                  }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n    </ComposableMap>\n  </div>\n  )\n}\n\nexport default RegionalMap;","import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport { Button } from 'reactstrap';\n\nimport RegionalMap from \"./RegionalMap\";\n\nconst width = 20;\nconst height = 20;\n\nconst UKMap = ({ setTooltipContent, areaCases, Regional, toggleDisplayRegional, secondaryTable, setSecondaryTable }) => {\n  const [geographies, setGeographies] = useState([]);\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/maps/phe_regions.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.eer).features)\n        })\n      })\n  }, []);\n\n  const handleCountryClick = countryIndex => {\n    const regionName = geographies[countryIndex].properties.EER13NM\n    const fileName = regionName.replace(/ /g, '_')\n\n    toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[regionName].regional });\n    setSecondaryTable({ display: true, areaName: regionName })\n  }\n\n  const projection = geoMercator().fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([1000, 1500, 2000, 2500, 5000, 15000])\n    .range(schemeReds[7]);\n\n\n    const UK = () => {\n      return (\n      <div style={{width: \"100%\"}} >\n        <ComposableMap width={ width } height={ height } projection={projection} >\n            <Geographies geography={geographies}>\n              {({ geographies }) =>\n                geographies.map((geo, idx) => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(`${geo.properties.EER13NM}: ${areaCases[geo.properties.EER13NM].total} Cases`);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                    fill={geo.properties.EER13NM in areaCases ? colorScale(areaCases[geo.properties.EER13NM].total) : colorScale(0)}\n                    onClick={() => handleCountryClick(idx)}\n                    style={{\n                      default: {\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"0.01\"\n                      },\n                      hover: {\n                        // fill: \"#F53\",\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"0.05\"\n                      },\n                      pressed: {\n                        outline: \"none\"\n                      }\n                    }}\n                  />\n                ))\n              }\n            </Geographies>\n        </ComposableMap>\n      </div>\n    )};\n\n    const Region = () => \n      <div>\n        <Button color='primary' onClick={() => { toggleDisplayRegional({display: false}); setSecondaryTable({ ...secondaryTable, display: false }); }}>BACK</Button>\n        <RegionalMap fileName={Regional.fileName} regionCases={Regional.regionCases} setTooltipContent={setTooltipContent}/>\n      </div>\n\n  return (\n    <div>\n{Regional.display ? <Region /> : <UK />\n        }\n    </div>\n\n  )\n}\n\nexport default React.memo(UKMap);","import React, { useEffect } from \"react\";\nimport { Table, Container, Row, Col, Alert } from 'reactstrap';\n\nconst CovidTable = ({ areaCases, toggleDisplayRegional, secondaryTable, setSecondaryTable }) => {\n  useEffect(() => {\n  }, []);\n\n  const handleOnClick = areaName => {\n        if (secondaryTable.areaName === areaName) {\n            if (secondaryTable.display) {\n                toggleDisplayRegional({display: false})\n            } else {\n                const fileName = areaName.replace(/ /g, '_')\n            \n                toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[areaName].regional });\n            }\n\n            setSecondaryTable({ display: !secondaryTable.display, areaName })\n        } else {\n            setSecondaryTable({ display: true, areaName })\n\n            const fileName = areaName.replace(/ /g, '_')\n            toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[areaName].regional });\n        }\n  }\n\n  return <Container>\n            <Row>\n                <Alert color=\"info\">\n                    Click on a row to view the numbers for each UTLA in the Region!\n                </Alert>\n            </Row>\n            <Row>\n                <Col>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>Region</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.keys(areaCases).map(areaName => <tr onClick={ () => handleOnClick(areaName) }>\n                                                                        <td>{areaName}</td>\n                                                                        <td>{areaCases[areaName].total}</td>\n                                                                    </tr>)}\n                        </tbody>\n                    </Table>\n                </Col>\n                <Col>\n                {secondaryTable.display ?\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>{secondaryTable.areaName}</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {areaCases.length === 0 ? null :\n                                Object.keys(areaCases[secondaryTable.areaName].regional).map(areaName => <tr>\n                                                                                                            <td>{areaName}</td>\n                                                                                                            <td>{areaCases[secondaryTable.areaName].regional[areaName]}</td>\n                                                                                                        </tr>)}\n                        </tbody>\n                    </Table>\n                :\n                null\n                            }\n\n                </Col>\n            </Row>\n        </Container>;\n    }\n\nexport default React.memo(CovidTable);","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst Chart = ({ borderColor, backgroundColor, date, data, label, display, height, width }) =>\n    <div style={{borderColor, backgroundColor, height, width }} >\n        <Line\n            data={{\n                labels: date,\n                datasets: [{\n                    label,\n                    fill: false,\n                    borderColor,\n                    data,\n                    display\n                }]\n            }}\n            options={{\n                legend: {\n                    display\n                },\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false,\n                            display\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            display\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false,\n                            display\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            callback: value => `${value / 1000}k`,\n                            display\n                        }\n                    }]\n                }\n            }}\n        />\n    </div>;\n\nexport default Chart;\n\n// import React from \"react\";\n// import { Line } from \"react-chartjs-2\";\n\n// const Chart = ({ borderColor, backgroundColor, date, data, label }) =>\n//     <div style={{borderColor, backgroundColor, height:100, width:400 }} >\n//         <Line\n//             data={{\n//                 labels: date,\n//                 datasets: [{\n//                     label,\n//                     fill: false,\n//                     display: false,\n//                     borderColor,\n//                     data,\n//                 }]\n//             }}\n//             options={{\n//                 legend: {\n//                     display: false\n//                  },\n//                 maintainAspectRatio: false,\n//                 scales: {\n//                     xAxes: [{\n//                         gridLines: {\n//                             drawOnChartArea: false,\n//                             display: false\n//                         },\n//                         ticks: {\n//                             autoSkip: true,\n//                             maxTicksLimit: 7,\n//                             display: false\n//                         }\n//                     }],\n//                     yAxes: [{\n//                         gridLines: {\n//                             drawOnChartArea: false,\n//                             display: false\n//                         },\n//                         ticks: {\n//                             autoSkip: true,\n//                             maxTicksLimit: 7,\n//                             callback: value => `${value / 1000}k`,\n//                             display: false\n//                         }\n//                     }]\n//                 }\n//             }}\n//         />\n//     </div>;\n\n// export default Chart;","import React, { useState, useEffect } from \"react\";\nimport { Card, CardTitle, CardBody, Col, Row, CardSubtitle } from 'reactstrap';\nimport Chart from './Chart.jsx';\n\nconst width = 800;\nconst height = 800;\n\nconst Dashboard = ({ borderColors, backgroundColors, labels, cases }) => {\n  useEffect(() => {\n  }, [])\n\n  return (\n    <Row>\n        {backgroundColors.map((color, i) => <Col>\n                                                <Card style={{backgroundColor: color}}>\n                                                    <div>\n                                                    <Chart borderColor={borderColors[i]} backgroundColor={backgroundColors[i]} label={labels[i]} date={cases.Date} data={cases[Object.keys(cases)[i]]} display={false}/>\n                                                    </div>\n                                                    <CardBody>\n                                                        <CardTitle>{labels[i]}</CardTitle>\n                                                        <CardSubtitle>{cases[Object.keys(cases)[i]].slice(-1)[0]}</CardSubtitle>\n                                                    </CardBody>\n                                                </Card>\n                                            </Col>)}\n    </Row>\n  )\n}\n\nexport default React.memo(Dashboard);","import React, { useState, useEffect } from \"react\";\nimport UKMap from './components/UKMap.jsx';\nimport ReactTooltip from \"react-tooltip\";\nimport { Container, Row, Col } from 'reactstrap';\nimport CovidTable from \"./components/CovidTable.jsx\";\nimport { Button } from 'reactstrap';\nimport Chart from './components/Chart.jsx';\nimport Dashboard from \"./components/Dashboard.jsx\";\nimport { Red, Blue, Grey, LightRed, LightBlue, LightGrey } from './components/Constants.jsx';\n\nconst borderColors = [Red, Blue, Grey];\nconst backgroundColors = [LightRed, LightBlue, LightGrey];\nconst labels = ['Confirmed', 'Tested', 'Deceased'];\n\nconst App = () => {\n    const [cases, setCases] = useState(null)\n    const [content, setContent] = useState('');\n    const [areaCases, setAreaCases] = useState([]);\n    const [Regional, toggleDisplayRegional] = useState({ display: false, fileName: '', regionCases: '' });\n    const [secondaryTable, setSecondaryTable] = useState({ display: false, areaName: '' });\n\n    useEffect(() => {\n        fetch(process.env.PUBLIC_URL + \"/covid_data/uk_totals.json\")\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log(`There was a problem: ${response.status}`)\n                    return\n                }\n                response.json().then(cases => {\n                    setCases(cases);\n                })\n            });\n        \n        fetch(process.env.PUBLIC_URL + \"/covid_data/uk_by_region.json\")\n            .then(response => {\n              if (response.status !== 200) {\n                console.log(`There was a problem: ${response.status}`)\n                return\n              }\n              response.json().then(cases => {\n                setAreaCases(cases);\n              })\n            })\n    }, [])\n\n  return (\n    <Container data-tip=''>\n        <Row>\n            <Col>\n                <h1>{'England Covid-19 Tracker'}</h1>\n            </Col>\n        </Row>\n        {cases === null ? null : <Dashboard borderColors={borderColors} backgroundColors={backgroundColors} labels={labels} cases={cases} /> }\n        <Row>\n            <Col>\n                <UKMap setTooltipContent={setContent} areaCases={areaCases} Regional={Regional} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} />\n                <ReactTooltip>{content}</ReactTooltip>\n            </Col>\n            <Col>\n                <CovidTable areaCases={areaCases} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} />\n                \n            </Col>\n        </Row>\n        <Row>{cases === null ? null : borderColors.map((color, i)=> <Chart borderColor={borderColors[i]} backgroundColor={backgroundColors[i]} label={labels[i]} date={cases.Date} data={cases[Object.keys(cases)[i]]} display={true} height={200} width={700} />)} </Row>\n        {/* <Row>{cases === null ? null : <Chart borderColor={Blue} backgroundColor={LightBlue} date={cases.Date} data={cases.Tests} label={'Tests'} />} </Row>\n        <Row>{cases === null ? null : <Chart borderColor={Grey} backgroundColor={LightGrey} date={cases.Date} data={cases.Deaths} label={'Deaths'} />} </Row> */}\n        <Row>\n            <Button style={{backgroundColor: 'White', color: 'black'}} onClick={() => window.open('https://www.github.com/tkhokhar25/uk-covid')}>\n                <img src={process.env.PUBLIC_URL + '/logo32.png'} alt='yolo'></img>Check out on Github\n            </Button>\n        </Row>\n    </Container>\n  )\n}\n\nexport default App;","export const Red = '#ff073a';\nexport const Blue = '#3a07ff';\nexport const Grey = 'grey';\n\nexport const LightRed = 'rgba(255,7,58,0.12549)';\nexport const LightBlue = 'rgba(58,7,255,0.12549)';\nexport const LightGrey = '#DCDCDC';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}